# 1	Создайте класс Calculator. В классе реализуйте метод calculate, который будет выполнять различные вычисления в
# зависимости от входных параметров.
# 2	Логика метода calculate:
# ◦	Вариант 1: Если передано два числовых аргумента, метод должен возвращать их сумму.
# ◦	Вариант 2: Если передано три числовых аргумента, метод должен возвращать их произведение.
# ◦	Вариант 3: Если передан один аргумент типа list (список чисел), метод должен возвращать сумму элементов списка.
# ◦	Вариант 4: (дополнительно): Если среди аргументов есть строки, метод должен вернуть конкатенацию строковых
#   представлений всех аргументов.
# 3	Реализация:
# ◦	Для реализации «перегрузки» используйте аргументы переменной длины (*args) и внутри метода определяйте логику в
#   зависимости от len(args) и типов элементов.
# ◦	Обработайте ситуацию, когда аргументы не соответствуют ни одному варианту (выведите сообщение об ошибке или верните None).
# 4	Тестирование:
# ◦	Создайте несколько примеров использования метода calculate:
# ▪	Вычислите сумму для двух чисел.
# ▪	Вычислите произведение для трех чисел.
# ▪	Вычислите сумму для списка чисел.
# ▪	Выведите результат для смешанных аргументов (например, число и строку).


class Calculator:
    def __init__(self, *args):
        self.args = args

    def calculate(self):
        if all(isinstance(x, int) or isinstance(x, float) for x in self.args):
            if len(self.args) == 2:
                return round((self.args[0] + self.args[1]), 2)
            elif len(self.args) == 3:
                return round((self.args[0] * self.args[1] * self.args[2]), 2)
        elif all(isinstance(x, list) for x in self.args):
            summ = 0
            for x in self.args[0]:
                summ = summ + x
            return summ
        elif any(isinstance(el, str) for el in self.args):
            string_list = map(str, self.args)
            result = " ".join(string_list)
            return result


# ТЕСТИРОВАНИЕ КОДА

# Вариант 1: Если передано два числовых аргумента, метод должен возвращать их сумму.
calc1 = Calculator(2, 4)
print(f"Сумма переданных элементов: {calc1.calculate()}")

# Вариант 2: Если передано три числовых аргумента, метод должен возвращать их произведение.
calc2 = Calculator(2.1, 4.234, 5)
print(f"Произведение переданных элементов: {calc2.calculate()}")

# Вариант 3: Если передан один аргумент типа list (список чисел), метод должен возвращать сумму элементов списка.
calc3 = Calculator([2, 4.234, 5])
print(f"Сумма элементов списка: {calc3.calculate()}")

# Вариант 4: (дополнительно): Если среди аргументов есть строки, метод должен вернуть конкатенацию строковых
#   представлений всех аргументов.
calc4 = Calculator('dd', 45, 'ff', 56)
print(f"Конкатенацию строковых представлений всех аргументов: {calc4.calculate()}")
